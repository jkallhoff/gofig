{"name":"Gofig","tagline":"gofig is a config file Go package for loading config files at runtime","body":"gofig\r\n=============\r\n\r\nGofig provides methods to load configuration values from a given JSON file.\r\n\r\nWhen inflating structs, key name underscores are dropped & the first letter of the next\r\nword is capitalized.  For example, a json key of 'my_config_value' will be\r\npopulated into a struct field called MyConfigValue.\r\n\r\nDocumentation available at [godoc](http://godoc.org/github.com/JKallhoff/gofig).\r\n\r\nExample\r\n-------\r\n    if conf, err := gofig.Load(\"./application.conf\"); err == nil {\r\n        // Basic types\r\n        s, err := conf.Str(\"first_name\")\r\n        b, err := conf.Bool(\"is_active\")\r\n        i, err := conf.Int(\"item_count\")\r\n        f, err := conf.Float(\"ranking\")\r\n        a, err := conf.Array(\"some_array\")\r\n        m, err := conf.Map(\"complex_object\")\r\n        \r\n        // Inflating structs\r\n        obj := &SomeType{}\r\n        if err := conf.Struct(\"complex_object\", obj); err == nil {\r\n            // do something with inflated obj struct\r\n        }\r\n\r\n        var items []Item\r\n        if err := conf.StructArray(\"lots_of_items\", &items); err == nil {\r\n            // do something with populated items array  \r\n        }\r\n    }","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}